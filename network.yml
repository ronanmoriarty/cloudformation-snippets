AWSTemplateFormatVersion: "2010-09-09"
Description: "Networking layer"
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - development
      - test
      - staging
      - production
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2a
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2b
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2c
      CidrBlock: 192.168.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2a
      CidrBlock: 192.168.4.0/24
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2b
      CidrBlock: 192.168.5.0/24
      Tags:
        - Key: Environment
          Value: !Ref Environment
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2c
      CidrBlock: 192.168.6.0/24
      Tags:
        - Key: Environment
          Value: !Ref Environment
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for load balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${Environment}-my-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Tags:
        - Key: Environment
          Value: !Ref Environment
      Type: application
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
  EIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPB.AllocationId
      SubnetId: !Ref PublicSubnetB
  EIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPC.AllocationId
      SubnetId: !Ref PublicSubnetC
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}PublicSubnetRouteTable
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VPC
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}PrivateSubnetARouteTable
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VPC
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}PrivateSubnetBRouteTable
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VPC
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}PrivateSubnetCRouteTable
        - Key: Environment
          Value: !Ref Environment
      VpcId: !Ref VPC
Outputs:
  VPC:
    Description: "The VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  LoadBalancer:
    Description: "The public load balancer"
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
  LoadBalancerSecurityGroup:
    Description: "The public load balancer security group"
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerSecurityGroup"
  NATGatewayA:
    Description: "The NAT Gateway in AZ a"
    Value: !Ref NATGatewayA
    Export:
      Name: !Sub "${AWS::StackName}-NATGatewayA"
  NATGatewayB:
    Description: "The NAT Gateway in AZ b"
    Value: !Ref NATGatewayB
    Export:
      Name: !Sub "${AWS::StackName}-NATGatewayB"
  NATGatewayC:
    Description: "The NAT Gateway in AZ c"
    Value: !Ref NATGatewayC
    Export:
      Name: !Sub "${AWS::StackName}-NATGatewayC"
  PublicSubNetA:
    Description: "The public subnet in AZ a"
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"
  PrivateSubNetA:
    Description: "The private subnet in AZ a"
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
  PublicSubNetB:
    Description: "The public subnet in AZ b"
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"
  PrivateSubNetB:
    Description: "The private subnet in AZ b"
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"
  PublicSubNetC:
    Description: "The public subnet in AZ c"
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetC"
  PrivateSubNetC:
    Description: "The private subnet in AZ c"
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetC"